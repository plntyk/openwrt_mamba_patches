--- linux-3.2.40.orig/net/8021q/vlan.c	2013-03-05 19:24:30.000000000 -0800
+++ linux-3.2.40/net/8021q/vlan.c	2013-04-13 23:50:16.000000000 -0700
@@ -31,6 +31,7 @@
 #include <net/arp.h>
 #include <linux/rtnetlink.h>
 #include <linux/notifier.h>
+#include <linux/mv_nfp.h>
 #include <net/rtnetlink.h>
 #include <net/net_namespace.h>
 #include <net/netns/generic.h>
@@ -42,6 +43,7 @@
 
 #define DRV_VERSION "1.8"
 
+
 /* Global VLAN variables */
 
 int vlan_net_id __read_mostly;
@@ -122,6 +124,11 @@
 	if (vlan->flags & VLAN_FLAG_GVRP)
 		vlan_gvrp_request_leave(dev);
 
+#if defined(CONFIG_MV_ETH_NFP_HOOKS)
+	if (nfp_mgr_p->nfp_hook_vlan_del)
+		nfp_mgr_p->nfp_hook_vlan_del(dev->ifindex);
+#endif /* CONFIG_MV_ETH_NFP_HOOKS */
+
 	vlan_group_set_device(grp, vlan_id, NULL);
 	/* Because unregister_netdevice_queue() makes sure at least one rcu
 	 * grace period is respected before device freeing,
@@ -288,6 +295,11 @@
 	if (err < 0)
 		goto out_free_newdev;
 
+#if defined(CONFIG_MV_ETH_NFP_HOOKS)
+	if (nfp_mgr_p->nfp_hook_vlan_add)
+		nfp_mgr_p->nfp_hook_vlan_add(new_dev->ifindex, new_dev, real_dev->ifindex, vlan_id);
+#endif /* CONFIG_MV_ETH_NFP_HOOKS */
+
 	return 0;
 
 out_free_newdev:
@@ -712,6 +724,28 @@
 	vlan_gvrp_uninit();
 }
 
+#if defined(CONFIG_MV_ETH_NFP_HOOKS)
+void vlan_sync(void)
+{
+	struct net_device *dev;
+
+	rtnl_lock();
+	for_each_netdev(&init_net, dev) {
+		if (dev->priv_flags & IFF_802_1Q_VLAN) {
+			struct vlan_dev_info *vlan = vlan_dev_info(dev);
+			struct net_device *real_dev = vlan->real_dev;
+			u16 vlan_id = vlan->vlan_id;
+			if (nfp_mgr_p->nfp_hook_vlan_add)
+				if (nfp_mgr_p->nfp_hook_vlan_add(dev->ifindex, dev, real_dev->ifindex, vlan_id))
+					printk(KERN_ERR "nfp_hook_vlan_add failed in %s\n", __func__);
+		}
+	}
+	rtnl_unlock();
+}
+EXPORT_SYMBOL(vlan_sync);
+#endif /* CONFIG_MV_ETH_NFP_HOOKS */
+
+
 module_init(vlan_proto_init);
 module_exit(vlan_cleanup_module);
 
