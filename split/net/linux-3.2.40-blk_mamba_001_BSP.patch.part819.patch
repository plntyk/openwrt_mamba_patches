--- linux-3.2.40.orig/net/core/neighbour.c	2013-03-05 19:24:30.000000000 -0800
+++ linux-3.2.40/net/core/neighbour.c	2013-04-13 23:50:18.000000000 -0700
@@ -36,7 +36,7 @@
 #include <linux/random.h>
 #include <linux/string.h>
 #include <linux/log2.h>
-
+#include <linux/mv_nfp.h>
 #define NEIGH_DEBUG 1
 
 #define NEIGH_PRINTK(x...) printk(x)
@@ -571,7 +571,7 @@
 }
 EXPORT_SYMBOL_GPL(__pneigh_lookup);
 
-struct pneigh_entry * pneigh_lookup(struct neigh_table *tbl,
+struct pneigh_entry *pneigh_lookup(struct neigh_table *tbl,
 				    struct net *net, const void *pkey,
 				    struct net_device *dev, int creat)
 {
@@ -701,6 +701,17 @@
 	if (neigh_del_timer(neigh))
 		printk(KERN_WARNING "Impossible event.\n");
 
+#if defined(CONFIG_MV_ETH_NFP_HOOKS)
+	if (neigh->nfp) {
+		if (nfp_mgr_p->nfp_hook_arp_delete)
+			nfp_mgr_p->nfp_hook_arp_delete(neigh->tbl->family, neigh->primary_key);
+
+		NEIGH_PRINTK2("0x%8lx: neigh %p, ref=%d, state=%d, nfp=%d is connected in %s.\n",
+			jiffies, neigh, atomic_read(&neigh->refcnt), neigh->nud_state, neigh->nfp, __func__);
+	}
+#endif /* CONFIG_MV_ETH_NFP_HOOKS */
+
+
 	skb_queue_purge(&neigh->arp_queue);
 
 	dev_put(neigh->dev);
@@ -732,7 +743,17 @@
  */
 static void neigh_connect(struct neighbour *neigh)
 {
-	NEIGH_PRINTK2("neigh %p is connected.\n", neigh);
+
+#if defined(CONFIG_MV_ETH_NFP_HOOKS)
+	neigh->nfp = false;
+	if (nfp_mgr_p->nfp_hook_arp_add)
+		if (!nfp_mgr_p->nfp_hook_arp_add(neigh->tbl->family, neigh->primary_key, neigh->ha, neigh->dev->ifindex)) {
+			neigh->nfp = true;
+
+		NEIGH_PRINTK2("0x%8lx: neigh %p, ref=%d, state=%d, nfp=%d is connected in %s.\n",
+			jiffies, neigh, atomic_read(&neigh->refcnt), neigh->nud_state, neigh->nfp, __func__);
+	}
+#endif /* CONFIG_MV_ETH_NFP_HOOKS */
 
 	neigh->output = neigh->ops->connected_output;
 }
@@ -781,6 +802,20 @@
 			if (time_before(n->used, n->confirmed))
 				n->used = n->confirmed;
 
+#if defined(CONFIG_MV_ETH_NFP_HOOKS)
+			if ((atomic_read(&n->refcnt) == 1) && (state != NUD_FAILED) &&
+				time_after(jiffies, n->used + n->parms->gc_staletime)) {
+				if (n->nfp) {
+					if (nfp_mgr_p->nfp_hook_arp_is_confirmed)
+						if (nfp_mgr_p->nfp_hook_arp_is_confirmed(n->tbl->family, n->primary_key)) {
+							neigh_event_send(n, NULL);
+					}
+					NEIGH_PRINTK2("0x%8lx: neigh %p ref=%d, state=%d, NFP ARP aging in %s\n",
+						jiffies, n, atomic_read(&n->refcnt), n->nud_state, __func__);
+				}
+			}
+#endif /* CONFIG_MV_ETH_NFP_HOOKS */
+
 			if (atomic_read(&n->refcnt) == 1 &&
 			    (state == NUD_FAILED ||
 			     time_after(jiffies, n->used + n->parms->gc_staletime))) {
@@ -829,7 +864,7 @@
 	struct sk_buff *skb;
 
 	NEIGH_CACHE_STAT_INC(neigh->tbl, res_failed);
-	NEIGH_PRINTK2("neigh %p is failed.\n", neigh);
+	NEIGH_PRINTK2("0x%8lx: neigh %p is failed in %s.\n", jiffies, neigh, __func__);
 	neigh->updated = jiffies;
 
 	/* It is very thin place. report_unreachable is very complicated
@@ -880,17 +915,17 @@
 	if (state & NUD_REACHABLE) {
 		if (time_before_eq(now,
 				   neigh->confirmed + neigh->parms->reachable_time)) {
-			NEIGH_PRINTK2("neigh %p is still alive.\n", neigh);
+			NEIGH_PRINTK2("0x%8lx: neigh %p is still alive in %s.\n", now, neigh, __func__);
 			next = neigh->confirmed + neigh->parms->reachable_time;
 		} else if (time_before_eq(now,
 					  neigh->used + neigh->parms->delay_probe_time)) {
-			NEIGH_PRINTK2("neigh %p is delayed.\n", neigh);
+			NEIGH_PRINTK2("0x%8lx: neigh %p is delayed in %s.\n", now, neigh, __func__);
 			neigh->nud_state = NUD_DELAY;
 			neigh->updated = jiffies;
 			neigh_suspect(neigh);
 			next = now + neigh->parms->delay_probe_time;
 		} else {
-			NEIGH_PRINTK2("neigh %p is suspected.\n", neigh);
+			NEIGH_PRINTK2("0x%8lx: neigh %p is suspected in %s.\n", now, neigh, __func__);
 			neigh->nud_state = NUD_STALE;
 			neigh->updated = jiffies;
 			neigh_suspect(neigh);
@@ -906,7 +941,7 @@
 			notify = 1;
 			next = neigh->confirmed + neigh->parms->reachable_time;
 		} else {
-			NEIGH_PRINTK2("neigh %p is probed.\n", neigh);
+			NEIGH_PRINTK2("0x%8lx: neigh %p is probed in %s.\n", now, neigh, __func__);
 			neigh->nud_state = NUD_PROBE;
 			neigh->updated = jiffies;
 			atomic_set(&neigh->probes, 0);
@@ -973,7 +1008,8 @@
 			return 1;
 		}
 	} else if (neigh->nud_state & NUD_STALE) {
-		NEIGH_PRINTK2("neigh %p is delayed.\n", neigh);
+		NEIGH_PRINTK2("0x%8lx: neigh %p ref=%d is delayed in %s.\n",
+				now, neigh, atomic_read(&neigh->refcnt), __func__);
 		neigh->nud_state = NUD_DELAY;
 		neigh->updated = jiffies;
 		neigh_add_timer(neigh,
@@ -2862,6 +2898,44 @@
 
 #endif	/* CONFIG_SYSCTL */
 
+#if defined(CONFIG_MV_ETH_NFP_HOOKS)
+void neigh_sync(int family)
+{
+	struct neigh_table *tbl;
+	struct neighbour *n;
+	int h;
+	struct neigh_hash_table *nht;
+
+	read_lock(&neigh_tbl_lock);
+	rcu_read_lock_bh();
+
+	for (tbl = neigh_tables; tbl; tbl = tbl->next) {
+		if (tbl->family != family)
+			continue;
+		nht = rcu_dereference_bh(tbl->nht);
+
+		for (h = 0; h < (1 << nht->hash_shift); h++) {
+			for (n = rcu_dereference_bh(nht->hash_buckets[h]); n != NULL;
+				 n = rcu_dereference_bh(n->next)) {
+					 if (n->dev == NULL)
+						continue;
+					n->nfp = false;
+					if (nfp_mgr_p->nfp_hook_arp_add)
+						if (!nfp_mgr_p->nfp_hook_arp_add(n->tbl->family,
+							n->primary_key,
+							n->ha,
+							n->dev->ifindex)) {
+						n->nfp = true;
+					}
+			}
+		}
+	}
+	rcu_read_unlock_bh();
+	read_unlock(&neigh_tbl_lock);
+}
+EXPORT_SYMBOL(neigh_sync);
+#endif /* CONFIG_MV_ETH_NFP_HOOKS */
+
 static int __init neigh_init(void)
 {
 	rtnl_register(PF_UNSPEC, RTM_NEWNEIGH, neigh_add, NULL, NULL);
